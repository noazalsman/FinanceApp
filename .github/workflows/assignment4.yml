name: assignment4
on: 
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Debug Build Context
      run: ls -R
    - name: Build and export stocks
      uses: docker/build-push-action@v5
      with:
        context: ./stocks
        file: ./stocks/Dockerfile
        tags: stocks:latest
        outputs: type=docker, dest=/tmp/stocks-image.tar
    - name: Build and export capital-gains
      uses: docker/build-push-action@v5
      with:
        context: ./capital-gains
        file: ./capital-gains/Dockerfile
        tags: capital-gains:latest
        outputs: type=docker, dest=/tmp/capital-gains-image.tar
    - name: Upload artifact stocks
      uses: actions/upload-artifact@v4
      with:
        name: stocks-image
        path: /tmp/stocks-image.tar
    - name: Upload artifact capital-gains
      uses: actions/upload-artifact@v4
      with:
        name: capital-gains-image
        path: /tmp/capital-gains-image.tar
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download stocks image
        uses: actions/download-artifact@v4
        with:
          name: stocks-image
          path: /tmp/
      - name: Download capital-gains image
        uses: actions/download-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp/
      - name: Verify downloaded artifacts
        run: ls -l /tmp/
      - name: Load stocks image
        run: docker load --input /tmp/stocks-image.tar
      - name: Load capital-gains image
        run: docker load --input /tmp/capital-gains-image.tar
      - name: Check images are loaded
        run: docker image ls
      - name: Run Docker Compose
        run: docker compose up -d
      - name: Check containers are running
        run: docker ps
      - name: Wait for services to start
        run: sleep 5
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          pip install pytest-dependency
      - name: Check for tests directory
        run: ls -l
      - name: Run tests with pytest
        run: |
          cd tests
          pytest -v assn4_tests.py > assn4_test_results.txt
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assn4_test_results
          path: tests/assn4_test_results.txt
  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download stocks image
        uses: actions/download-artifact@v4
        with:
          name: stocks-image
          path: /tmp/
      - name: Download capital-gains image
        uses: actions/download-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp/
      - name: Load stocks image
        run: docker load --input /tmp/stocks-image.tar
      - name: Load capital-gains image
        run: docker load --input /tmp/capital-gains-image.tar
      - name: Run Docker Compose
        run: docker compose up -d
      - name: Check containers are running
        run: docker ps
      - name: Wait for services to start
        run: sleep 5
      - name: Post test stocks data
        run: |
          for i in {1..6}
          do
            curl -X POST http://localhost:5001/stocks -H "Content-Type: application/json" -d @tests/stock-objects/stock$i.json
          done
      - name: Verify inserted stocks
        run: curl -s http://localhost:5001/stocks
      - name: Read and execute queries
        run: |
          touch response.txt
          while IFS= read -r line; do
            echo "Processing query: $line"  # Debugging log

            service=$(echo "$line" | cut -d':' -f1 | xargs)
            query=$(echo "$line" | cut -d':' -f2- | xargs)

            if [ "$service" == "stocks" ]; then
              url="http://localhost:5001/stocks?$query"
            elif [ "$service" == "capital-gains" ]; then
              url="http://localhost:5003/capital-gains?$query"
            else
              echo "Invalid service name in query: $line" >> response.txt
              continue
            fi

            echo "Querying: $url"  # Debugging log
            response=$(curl -s "$url")

            # Log empty responses
            if [ -z "$response" ]; then
              echo "Warning: No response received for $url" >> response.txt
            fi

            echo "query: $line" >> response.txt
            echo "response: $response" >> response.txt
            echo "" >> response.txt
            done < query.txt
      - name: Upload response.txt
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt